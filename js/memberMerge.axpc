public class MemberMerge {
  public Boolean showRecords{get;set;}
    public List<Content__c> cust {get;set;}

    public String processStatus {get;set;}
    
    public Contact contact1 {get;set;}
    public Contact contact2 {get;set;}

    public sfdcAppRemoter.getUserReturnData contact1Data {get;set;}
    public sfdcAppRemoter.getUserReturnData contact2Data {get;set;}
    
    public List<Account> cust1Account {get;set;}
    public List<Account> cust2Account {get;set;}    
    
    //In constructor
    
    public MemberMerge() {
      showRecords =false;         
        contact1 = new Contact();
    contact2 = new Contact();
        contact1Data = new sfdcAppRemoter.getUserReturnData();
        contact2Data = new sfdcAppRemoter.getUserReturnData();
    }
    
  public class contWrapper { 
        public Boolean selected { get; set; }
        public Contact obj { get; set; }
    }    

    public List<contWrapper> cont1Lst {get;set;}
    public List<contWrapper> cont2Lst {get;set;}
    
    public List<contWrapper> createContWrapper(List<Contact> conterienceData) {
        List<contWrapper> contLst = new List<contWrapper>();
        for(Contact cont :conterienceData) {
            contWrapper contW = new contWrapper();
            contW.obj = cont;
            contW.selected = false;
            contLst.add(contW);
        }
    return contLst;
    }    
  public class acctWrapper { 
        public Boolean selected { get; set; }
        public Account obj { get; set; }
    }    

    public List<acctWrapper> acct1Lst {get;set;}
    public List<acctWrapper> acct2Lst {get;set;}
    
    public List<acctWrapper> createAcctWrapper(List<Account> accterienceData) {
        List<acctWrapper> acctLst = new List<acctWrapper>();
        for(Account acct :accterienceData) {
            acctWrapper acctW = new acctWrapper();
            acctW.obj = acct;
            acctW.selected = false;
            acctLst.add(acctW);
        }
    return acctLst;
    }
    
  public class expWrapper { 
        public Boolean selected { get; set; }
        public Experience__c obj { get; set; }
    }    

    public List<expWrapper> exp1Lst {get;set;}
    public List<expWrapper> exp2Lst {get;set;}
    
    public List<expWrapper> createExpWrapper(List<Experience__c> experienceData) {
        List<expWrapper> expLst = new List<expWrapper>();
        for(Experience__c exp :experienceData) {
            expWrapper expW = new expWrapper();
            expW.obj = exp;
            expW.selected = false;
            expLst.add(expW);
        }
    return expLst;
    }

  public class eaWrapper { 
        public Boolean selected { get; set; }
        public Exam_Attempt__c obj { get; set; }
    }    

    public List<eaWrapper> ea1Lst {get;set;}
    public List<eaWrapper> ea2Lst {get;set;}
    
    public List<eaWrapper> createEaWrapper(List<Exam_Attempt__c> eaData) {
        List<eaWrapper> eaLst = new List<eaWrapper>();
        if(eaData != null)
            for(Exam_Attempt__c ea :eaData) {
                eaWrapper eaW = new eaWrapper();
                eaW.obj = ea;
                eaW.selected = false;
                eaLst.add(eaW);
            }
    return eaLst;
    }

  public class opWrapper { 
        public Boolean selected { get; set; }
        public Opportunity obj { get; set; }
    }    

    public List<opWrapper> op1Lst {get;set;}
    public List<opWrapper> op2Lst {get;set;}
    
    public List<opWrapper> createOpWrapper(List<Opportunity> opData) {
        List<opWrapper> opLst = new List<opWrapper>();
        if(opData != null)
            for(Opportunity op :opData) {
                opWrapper opW = new opWrapper();
                opW.obj = op;
                opW.selected = false;
                opLst.add(opW);
            }
    return opLst;
    }
     
  public class cpeWrapper { 
        public Boolean selected { get; set; }
        public CPE_Claim__c obj { get; set; }
    }    

    public List<cpeWrapper> cpe1Lst {get;set;}
    public List<cpeWrapper> cpe2Lst {get;set;}
    
    public List<cpeWrapper> createCPEWrapper(List<CPE_Claim__c> cpeData) {
        List<cpeWrapper> cpeLst = new List<cpeWrapper>();
        if(cpeData != null)
            for(CPE_Claim__c cpe :cpeData) {
                cpeWrapper cpeW = new cpeWrapper();
                cpeW.obj = cpe;
                cpeW.selected = false;
                cpeLst.add(cpeW);
            }
    return cpeLst;
    }         
    

  public class conWrapper { 
        public Boolean selected { get; set; }
        public Contract obj { get; set; }
    }    

    public List<conWrapper> con1Lst {get;set;}
    public List<conWrapper> con2Lst {get;set;}
    
    public List<conWrapper> createConWrapper(List<Contract> conData) {
        List<conWrapper> conLst = new List<conWrapper>();
        if(conData != null)
            for(Contract con :conData) {
                conWrapper conW = new conWrapper();
                conW.obj = con;
                conW.selected = false;
                conLst.add(conW);
            }
    return conLst;
    }         
        
        
    public void fetchRecords(){
            
        contact1Data = sfdcAppRemoter.fetchUserDataInside(string.valueof(contact1.Id));
        contact2Data = sfdcAppRemoter.fetchUserDataInside(string.valueof(contact2.Id));

        cont1Lst = createContWrapper(contact1Data.contactData);
        cont2Lst = createContWrapper(contact2Data.contactData);
            
        acct1Lst = createAcctWrapper(contact1Data.accountData);
        acct2Lst = createAcctWrapper(contact2Data.accountData);

        exp1Lst = createExpWrapper(contact1Data.experienceData);
        exp2Lst = createExpWrapper(contact2Data.experienceData);

        ea1Lst = createEaWrapper(contact1Data.examAttemptData);
        ea2Lst = createEaWrapper(contact2Data.examAttemptData);

        op1Lst = createOpWrapper(contact1Data.opportunityData);
        op2Lst = createOpWrapper(contact2Data.opportunityData);

        cpe1Lst = createCPEWrapper(contact1Data.claimsData);
      cpe2Lst = createCPEWrapper(contact2Data.claimsData);
        
        con1Lst = createConWrapper(contact1Data.contractData);
      con2Lst = createConWrapper(contact2Data.contractData);
        
        showRecords = true;
        processStatus = '';
    }    

  public void combineContacts(){    
        
        List<cpeWrapper> cpeSrcLst;
        List<cpeWrapper> cpeTargetLst;
        sfdcAppRemoter.getUserReturnData contSrc;
        sfdcAppRemoter.getUserReturnData contTarget;
        Integer recMoved = 0;
        Id cpeRecordTypeID = RecordTypeHelper.GetRecordTypeId('Contract','CPE');
        Contract cpeContractTarget;
        Candidate_Requirement__c cpeCR;
        
        if(cont1Lst != null && cont1Lst.size() > 0 && cont2Lst != null && cont2Lst.size() > 0) {
            if(cont1Lst[0].selected && cont2Lst[0].selected) {
                processStatus = 'Cannot select both contacts as the destination!';
            } else {
                 system.debug('* * * contact1Data'+contact1Data);
                if(cont1Lst[0].selected) {
                    contTarget = contact1Data;
                    cpeTargetLst = cpe1Lst;                   
                    cpeSrcLst = cpe2Lst;
                } else {
                    contTarget = contact2Data;
                    cpeTargetLst = cpe2Lst;
                    cpeSrcLst = cpe1Lst;
                }
                 system.debug('* * * contTarget'+contTarget);

                for(Contract cont :contTarget.contractData) {
                    if(cont.RecordTypeId == cpeRecordTypeID) {
                        cpeContractTarget = cont;
                        for(Candidate_Requirement__c cr :cont.Candidate_Requirements__r) {
                            if(cr.Name=='CPE') {
                                cpeCR = cr;
                            }
                        }
                    }
                }
                
                if(cpeContractTarget!= null && cpeCR != null) {
                    List<CPE_Claim__c> moveCliams = new List<CPE_Claim__c>();
                    for(cpeWrapper cpeW :cpeSrcLst) {
                        if(cpeW.selected == true) {
                            cpeW.obj.Member__c = contTarget.contactData[0].Id;
                            cpeW.obj.Candidate_Requirement__c = cpeCR.Id;
                            moveCliams.add(cpeW.obj);
                            recMoved++;
                        }
                    }
                    update moveCliams;
                    processStatus = processStatus + '<br>Done Merge! Records Moved:' + string.valueOf(recMoved);                    
                } else {
                    processStatus = processStatus + '<br>Could not move CPE Credits, no target CPE Contract Requirement.';                    
                }

                
            }
        }
    }
}